{"version":3,"file":"static/js/660.100fcca7.chunk.js","mappings":"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","sources":["hooks/reduxHooks.ts","redux/selectors/trackingSelectors.ts","components/Tracking/TrackingForm/TrackingForm.styled.ts","components/Tracking/TrackingForm/TrackingForm.tsx","components/Tracking/TrackingData/TrackingData.styled.ts","components/Tracking/TrackingData/TrackingData.tsx","redux/selectors/trackingNumbersSelectors.ts","components/Tracking/TrackingStory/TrackingStory.styled.ts","components/Tracking/TrackingStory/TrackingStory.tsx","pages/PageCheckBillOfLading/PageCheckBillOfLading.styles.ts","pages/PageCheckBillOfLading/PageCheckBillOfLading.tsx"],"sourcesContent":["import { useDispatch, useSelector, TypedUseSelectorHook } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"../redux/store/store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { IGetTrackingStatusData, IState } from \"../../types/redux.types\";\n\nexport const trackingDataSelector = (\n  state: IState\n): IGetTrackingStatusData | null => state.trackingState.trackingData;\n\nexport const trackingLoadingSelector = (state: IState): boolean =>\n  state.trackingState.loading;\n","import { styled } from \"@mui/system\";\nimport { TextField } from \"@mui/material\";\n\nexport const Form = styled(\"form\")({\n  marginBottom: \"3rem\",\n  width: \"100%\",\n  maxWidth: \"468px\",\n  minHeight: \"200px\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n  justifyContent: \"space-between\",\n});\n\nexport const Input = styled(TextField)({\n  width: \"100%\",\n  maxWidth: \"400px\",\n\n  \"@media screen and (min-width:1100px)\": {\n    maxWidth: \"600px\",\n  },\n\n  \"&.MuiTextField-root\": {\n    \"@media screen and (max-width:767px)\": {\n      marginBottom: \"1rem\",\n    },\n  },\n});\n","import React from \"react\";\nimport { ITrackingFormProps } from \"../../../types/tracking-components.types\";\nimport PrimaryButton from \"../../Common/PrimaryButton/PrimaryButton\";\nimport * as Styled from \"./TrackingForm.styled\";\n\nconst TrackingForm: React.FC<ITrackingFormProps> = ({\n  onChange,\n  trackingNumber,\n  submitForm,\n  sidebarHandler,\n}: ITrackingFormProps): JSX.Element => {\n  return (\n    <Styled.Form onSubmit={(event) => submitForm(event)}>\n      <Styled.Input\n        variant=\"outlined\"\n        label=\"Введiть ТТН\"\n        type=\"number\"\n        value={trackingNumber}\n        onChange={(event) => onChange(event)}\n      />\n\n      <PrimaryButton text=\"Отримати статус ТТН\" type=\"submit\" />\n\n      <PrimaryButton\n        text=\"Iсторія введенних ТТН\"\n        type=\"button\"\n        onClick={() => sidebarHandler()}\n      />\n    </Styled.Form>\n  );\n};\n\nexport default TrackingForm;\n","import { styled } from \"@mui/system\";\nimport { CardContent, Card, Box, Typography } from \"@mui/material\";\n\nimport { COLORS } from \"../../../services/consts/theme/colors.conts\";\n\nexport const MyCard = styled(Card)({\n  width: \"100%\",\n  minHeight: \"312px\",\n  maxWidth: \"468px\",\n});\n\nexport const MyCardContent = styled(CardContent)({\n  \"& :not(:last-child)\": {\n    marginBottom: \"0.8rem\",\n  },\n});\n\nexport const MyTextWrapper = styled(Box)({\n  borderBottom: \"1px solid rgba(0, 0, 0, 0.6)\",\n  paddingBottom: \"5px\",\n});\n\nexport const MyTitle = styled(Typography)({\n  color: `${COLORS.accentColor}`,\n  display: \"flex\",\n  alignItems: \"center\",\n\n  \"&.MuiTypography-root\": {\n    fontSize: \"20px\",\n  },\n});\n","import React from \"react\";\nimport { Box, Button, CardActions, Typography } from \"@mui/material\";\nimport { useAppSelector } from \"../../../hooks/reduxHooks\";\nimport {\n  trackingDataSelector,\n  trackingLoadingSelector,\n} from \"../../../redux/selectors/trackingSelectors\";\nimport { ITrackindDataProps } from \"../../../types/tracking-components.types\";\n\nimport DescriptionIcon from \"@mui/icons-material/Description\";\nimport SystemUpdateAltIcon from \"@mui/icons-material/SystemUpdateAlt\";\nimport PinDropIcon from \"@mui/icons-material/PinDrop\";\nimport NumbersIcon from \"@mui/icons-material/Numbers\";\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\n\nimport * as Styled from \"./TrackingData.styled\";\nimport { Loader } from \"../../Common\";\n\nconst TrackingData: React.FC<ITrackindDataProps> = ({\n  setShowTrackingData,\n}: ITrackindDataProps) => {\n  const trackingData = useAppSelector(trackingDataSelector);\n\n  const loading = useAppSelector(trackingLoadingSelector);\n\n  const {\n    CityRecipient,\n    CitySender,\n    Number,\n    Status,\n    WarehouseRecipient,\n    WarehouseSender,\n  } = trackingData!!;\n\n  if (loading) return <Loader />;\n\n  return (\n    <Styled.MyCard>\n      <CardActions sx={{ justifyContent: \"flex-end\" }}>\n        <Button\n          onClick={() => setShowTrackingData(false)}\n          endIcon={<VisibilityOffIcon />}\n        >\n          Приховати\n        </Button>\n      </CardActions>\n      <Styled.MyCardContent>\n        {/* trackingNumber */}\n\n        <Styled.MyTextWrapper>\n          <Styled.MyTitle>\n            <NumbersIcon sx={{ mr: \"10px\" }} /> ТТН:\n          </Styled.MyTitle>\n          <Typography variant=\"h6\" component={\"p\"}>\n            {Number}\n          </Typography>\n        </Styled.MyTextWrapper>\n\n        {/* Delivery Status */}\n        <Styled.MyTextWrapper>\n          <Styled.MyTitle>\n            <DescriptionIcon sx={{ mr: \"10px\" }} /> Статус доставки:\n          </Styled.MyTitle>\n          <Typography variant=\"h6\" component={\"p\"}>\n            {Status}\n          </Typography>\n        </Styled.MyTextWrapper>\n\n        {/* Sender */}\n        <Styled.MyTextWrapper>\n          <Styled.MyTitle>\n            <SystemUpdateAltIcon sx={{ mr: \"10px\" }} /> Відправник:\n          </Styled.MyTitle>\n          <Typography variant=\"h6\" component={\"p\"}>\n            {`${WarehouseSender}, ${CitySender}`}\n          </Typography>\n        </Styled.MyTextWrapper>\n\n        {/* Recipient */}\n        <Box>\n          <Styled.MyTitle>\n            <PinDropIcon sx={{ mr: \"10px\" }} /> Одержувач:\n          </Styled.MyTitle>\n          <Typography variant=\"h6\" component={\"p\"}>\n            {`${WarehouseRecipient}, ${CityRecipient}`}\n          </Typography>\n        </Box>\n      </Styled.MyCardContent>\n    </Styled.MyCard>\n  );\n};\n\nexport default TrackingData;\n","import { IState } from \"../../types/redux.types\";\n\nexport const trackingNumbersDataSelector = (state: IState): [] | string[] =>\n  state.trackingNumbersState.trackingNumbersStory;\n","import { styled } from \"@mui/system\";\nimport { CardContent, Box, Drawer } from \"@mui/material\";\n\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\n\nimport { COLORS } from \"../../../services/consts/theme/colors.conts\";\n\nexport const MyCardContent = styled(CardContent)({\n  display: \"flex\",\n  flexWrap: \"nowrap\",\n  flexDirection: \"column\",\n\n  overflowY: \"auto\",\n  overflowX: \"hidden\",\n\n  width: \"100%\",\n  minWidth: \"320px\",\n});\n\nexport const ActionsWrapper = styled(Box)({\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  marginBottom: \"2rem\",\n});\n\nexport const MyIconArrowBackSidebar = styled(ArrowForwardIosIcon)({\n  color: `${COLORS.primaryColor}`,\n  transition: \"all 250ms linear\",\n  \"&:hover\": {\n    color: `${COLORS.accentColor}`,\n  },\n});\n\nexport const MyDrawer = styled(Drawer)({\n  \"&.MuiDrawer-root\": {\n    zIndex: 9999999,\n  },\n});\n\nexport const MyStoryWrapper = styled(Box)({\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  \"&:not(last-child)\": {\n    marginBottom: \"1rem\",\n  },\n});\n","import React from \"react\";\nimport { nanoid } from \"@reduxjs/toolkit\";\n\nimport { useAppDispatch, useAppSelector } from \"../../../hooks/reduxHooks\";\nimport { clearTrackingNumbersStory } from \"../../../redux/slices/trackingNumbersSlice\";\nimport { trackingNumbersDataSelector } from \"../../../redux/selectors/trackingNumbersSelectors\";\n\nimport { ITrackingStoryProps } from \"../../../types/tracking-components.types\";\n\nimport { Typography, Button, Divider, IconButton } from \"@mui/material\";\n\nimport PrimaryButton from \"../../Common/PrimaryButton/PrimaryButton\";\n\nimport * as Styled from \"./TrackingStory.styled\";\n\nconst TrackingStory: React.FC<ITrackingStoryProps> = ({\n  getTrackingStatusFromStory,\n  deleteTrackingNumberFromStory,\n  sidebarHandler,\n  isSideBarOpen,\n}: ITrackingStoryProps) => {\n  const dispatch = useAppDispatch();\n\n  const story = useAppSelector(trackingNumbersDataSelector);\n\n  return (\n    <Styled.MyDrawer anchor=\"right\" open={isSideBarOpen} variant=\"temporary\">\n      <Styled.MyCardContent>\n        <Styled.ActionsWrapper>\n          <IconButton onClick={() => sidebarHandler()} aria-label=\"hide\">\n            <Styled.MyIconArrowBackSidebar />\n          </IconButton>\n\n          <PrimaryButton\n            text=\"Очистити iсторію ТТН\"\n            type=\"button\"\n            // Clear strort in local storage\n            onClick={() => dispatch(clearTrackingNumbersStory())}\n          />\n        </Styled.ActionsWrapper>\n\n        <Typography variant=\"h5\" component=\"p\" gutterBottom>\n          Історія:\n        </Typography>\n        {story.length > 0 && (\n          <Typography color={\"darkgray\"} component=\"p\" sx={{ mb: \"2rem\" }}>\n            * натисніть на ТТН, щоб отримати інформацію\n          </Typography>\n        )}\n\n        {story.map((trackignNumber: string) => (\n          <Styled.MyStoryWrapper key={nanoid()}>\n            <Button onClick={() => getTrackingStatusFromStory(trackignNumber)}>\n              <Typography variant=\"body1\">ТТН : {trackignNumber}</Typography>\n            </Button>\n            <PrimaryButton\n              type=\"button\"\n              text=\"Видалити\"\n              onClick={() => deleteTrackingNumberFromStory(trackignNumber)}\n            />\n          </Styled.MyStoryWrapper>\n        ))}\n\n        <Divider />\n      </Styled.MyCardContent>\n    </Styled.MyDrawer>\n  );\n};\n\nexport default TrackingStory;\n","import { styled } from \"@mui/system\";\nimport { Container } from \"@mui/material\";\n\nexport const MyContainer = styled(Container)({\n  paddingTop: \"3rem\",\n  paddingBottom: \"3rem\",\n\n  \"&.MuiContainer-root\": {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n});\n","import React, { FC, useState } from \"react\";\n\nimport { useAppDispatch, useAppSelector } from \"../../hooks/reduxHooks\";\n\nimport { getTrackingStatus } from \"../../redux/operations/trackingOperations\";\n\nimport {\n  trackingDataSelector,\n  trackingLoadingSelector,\n} from \"../../redux/selectors/trackingSelectors\";\n\nimport {\n  EventOnChange,\n  EventOnSubmit,\n} from \"../../types/tracking-components.types\";\n\nimport {\n  TrackingForm,\n  TrackingData,\n  TrackingStory,\n} from \"../../components/Tracking\";\n\nimport { Header, Loader } from \"../../components/Common\";\n\nimport * as Styled from \"./PageCheckBillOfLading.styles\";\n\nimport { Typography } from \"@mui/material\";\n\nimport { toast } from \"react-toastify\";\nimport {\n  deleteTrackingNumberFromPersist,\n  setTrackingNumberToStory,\n} from \"../../redux/slices/trackingNumbersSlice\";\n\nconst PageCheckBillOfLading: FC = () => {\n  const [trackingNumber, setTrackingNumber] = useState(\"\");\n  const [isSideBarOpen, setIsSideBarOpen] = useState(false);\n  const [showTrackingData, setShowTrackingData] = useState<boolean>(true);\n\n  const dispatch = useAppDispatch();\n\n  const trackingData = useAppSelector(trackingDataSelector);\n  const loading = useAppSelector(trackingLoadingSelector);\n\n  const onChange = (event: EventOnChange) => {\n    setTrackingNumber(event.currentTarget.value);\n  };\n\n  const submitForm = (event: EventOnSubmit) => {\n    event.preventDefault();\n    const regex = /^\\d{14}$/;\n\n    if (!regex.test(trackingNumber))\n      return toast.warn(\"ТТН повинен складатися з 14 цифр\");\n\n    // Reset the value of the TTN number\n    setTrackingNumber(\"\");\n\n    // Show information card\n    setShowTrackingData(true);\n\n    // Send a request via TTN to the backend\n    dispatch(getTrackingStatus(trackingNumber));\n\n    // Write TTN in local storage only if the date is true\n    trackingData && dispatch(setTrackingNumberToStory(trackingNumber));\n  };\n\n  const getTrackingStatusFromStory = (trackingNumber: string) => {\n    // Set the value of TTN in the input of the form\n    setTrackingNumber(trackingNumber);\n\n    // Show information card\n    setShowTrackingData(true);\n\n    // Send a request via TTN to the backend\n    dispatch(getTrackingStatus(trackingNumber));\n  };\n\n  const deleteTrackingNumberFromStory = (trackingNumber: string) => {\n    // Remove the information card\n    setShowTrackingData(false);\n\n    // Reset the value of the TTN number\n    setTrackingNumber(\"\");\n\n    // Send an action to filter and resave the history of ttn in local strage\n    dispatch(deleteTrackingNumberFromPersist(trackingNumber));\n  };\n\n  // Sidebar toggle for TTN history\n  const sidebarHandler = () => {\n    setIsSideBarOpen((state) => !state);\n  };\n\n  if (loading) return <Loader />;\n\n  return (\n    <>\n      <Header />\n      <main>\n        <section>\n          <Typography\n            aria-label=\"Заголовок секцii перевірити ТТН\"\n            variant=\"h1\"\n            component={\"h1\"}\n            sx={{ display: \"none\" }}\n          >\n            Перевірити ТТН\n          </Typography>\n\n          <TrackingStory\n            getTrackingStatusFromStory={getTrackingStatusFromStory}\n            deleteTrackingNumberFromStory={deleteTrackingNumberFromStory}\n            sidebarHandler={sidebarHandler}\n            isSideBarOpen={isSideBarOpen}\n          />\n\n          <Styled.MyContainer>\n            <TrackingForm\n              trackingNumber={trackingNumber}\n              onChange={onChange}\n              submitForm={submitForm}\n              sidebarHandler={sidebarHandler}\n            />\n\n            {/* I show a card with information only if the Data is not null and the flag show the card is true */}\n\n            {trackingData && showTrackingData && (\n              <TrackingData setShowTrackingData={setShowTrackingData} />\n            )}\n          </Styled.MyContainer>\n        </section>\n      </main>\n    </>\n  );\n};\n\nexport default PageCheckBillOfLading;\n"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","trackingDataSelector","state","trackingState","trackingData","trackingLoadingSelector","loading","Form","styled","marginBottom","width","maxWidth","minHeight","display","flexDirection","alignItems","justifyContent","Input","TextField","_ref","onChange","trackingNumber","submitForm","sidebarHandler","_jsxs","Styled","onSubmit","event","children","_jsx","variant","label","type","value","PrimaryButton","text","onClick","MyCard","Card","MyCardContent","CardContent","MyTextWrapper","Box","borderBottom","paddingBottom","MyTitle","Typography","color","concat","COLORS","fontSize","setShowTrackingData","_ref2","CityRecipient","CitySender","Number","Status","WarehouseRecipient","WarehouseSender","Loader","CardActions","sx","Button","endIcon","VisibilityOffIcon","NumbersIcon","mr","component","DescriptionIcon","SystemUpdateAltIcon","PinDropIcon","trackingNumbersDataSelector","trackingNumbersState","trackingNumbersStory","flexWrap","overflowY","overflowX","minWidth","ActionsWrapper","MyIconArrowBackSidebar","ArrowForwardIosIcon","transition","MyDrawer","Drawer","zIndex","MyStoryWrapper","getTrackingStatusFromStory","deleteTrackingNumberFromStory","isSideBarOpen","dispatch","story","anchor","open","IconButton","clearTrackingNumbersStory","gutterBottom","length","mb","map","trackignNumber","nanoid","Divider","MyContainer","Container","paddingTop","_useState","useState","_useState2","_slicedToArray","setTrackingNumber","_useState3","_useState4","setIsSideBarOpen","_useState5","_useState6","showTrackingData","_Fragment","Header","TrackingStory","getTrackingStatus","deleteTrackingNumberFromPersist","TrackingForm","currentTarget","preventDefault","test","toast","setTrackingNumberToStory","TrackingData"],"sourceRoot":""}