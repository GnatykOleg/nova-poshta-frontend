{"version":3,"file":"static/js/399.8d3f9200.chunk.js","mappings":"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","sources":["hooks/reduxHooks.ts","redux/selectors/departmentsSelectors.ts","components/Departments/DepartmentsForm/DepartmentsForm.styled.ts","components/Departments/DepartmentsForm/DepartmentsForm.tsx","components/Departments/DepartmentsPagination/DepartmentsPagination.styled.ts","components/Departments/DepartmentsPagination/DepartmentsPagination.tsx","components/Departments/DepartmentsList/DepartmentsList.tsx","pages/PageDepartments/PageDepartments.tsx"],"sourcesContent":["import { useDispatch, useSelector, TypedUseSelectorHook } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"../redux/store/store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { IState } from \"../../types/redux.types\";\n\n// Get city for fetch data with pagination, and for this city\nexport const citySelector = (state: IState): string =>\n  state.departmentsState.city;\n\n// Get page for fetch data with pagination, and for this city\nexport const pageSelector = (state: IState): number =>\n  state.departmentsState.page;\n\n// Get departments for city\nexport const departmentsDataSelector = (state: IState) =>\n  state.departmentsState.departmentsForCityData;\n\n// Loading status\nexport const departmentsLoadingSelector = (state: IState): boolean =>\n  state.departmentsState.loading;\n","import { styled } from \"@mui/system\";\nimport { Box } from \"@mui/material\";\nimport { COLORS } from \"../../../services/consts/theme/colors.conts\";\n\nexport const MyBox = styled(Box)({\n  marginBottom: \"3rem\",\n  width: \"100%\",\n\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n});\n\nexport const PaperStyles = {\n  p: \"2px 4px\",\n  display: \"flex\",\n  alignItems: \"center\",\n  width: \"100%\",\n  maxWidth: 600,\n};\n\nexport const ButtonStyles = {\n  color: `${COLORS.primaryColor}`,\n  transition: \"all 250ms linear\",\n  \"&:hover\": {\n    color: `${COLORS.accentColor}`,\n  },\n};\n","import React, { useState } from \"react\";\n\nimport { setCity, setPage } from \"../../../redux/slices/departmentsSlice\";\n\nimport { useAppDispatch } from \"../../../hooks/reduxHooks\";\n\nimport {\n  EventOnChange,\n  EventOnSubmit,\n} from \"../../../types/tracking-components.types\";\n\nimport { Divider, IconButton, InputBase, Paper } from \"@mui/material\";\nimport SearchIcon from \"@mui/icons-material/Search\";\n\nimport * as Styled from \"./DepartmentsForm.styled\";\n\nconst CitiesSelect: React.FC = (): JSX.Element => {\n  const [value, setValue] = useState<string>(\"\");\n\n  const dispatch = useAppDispatch();\n\n  const onChange = (event: EventOnChange) => {\n    setValue(event.currentTarget.value);\n  };\n\n  const onSubmit = (event: EventOnSubmit) => {\n    event.preventDefault();\n    setValue(\"\");\n    dispatch(setPage(1));\n    dispatch(setCity(value));\n  };\n\n  return (\n    <Styled.MyBox>\n      <Paper onSubmit={onSubmit} component=\"form\" sx={Styled.PaperStyles}>\n        <InputBase\n          type=\"text\"\n          value={value}\n          onChange={onChange}\n          sx={{ ml: 1, flex: 1 }}\n          placeholder=\"Введiть місто\"\n        />\n\n        <Divider sx={{ height: 28, m: 0.5 }} orientation=\"vertical\" />\n\n        <IconButton\n          type=\"submit\"\n          color=\"primary\"\n          sx={{ p: \"10px\" }}\n          aria-label=\"directions\"\n        >\n          <SearchIcon sx={Styled.ButtonStyles} />\n        </IconButton>\n      </Paper>\n    </Styled.MyBox>\n  );\n};\n\nexport default CitiesSelect;\n","import { styled } from \"@mui/system\";\nimport { Box } from \"@mui/material\";\n\nexport const MyBox = styled(Box)({\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n\n  marginBottom: \"2rem\",\n});\n","import { Pagination, Stack } from \"@mui/material\";\nimport React from \"react\";\nimport { useAppSelector } from \"../../../hooks/reduxHooks\";\n\nimport { setPage } from \"../../../redux/slices/departmentsSlice\";\n\nimport { useAppDispatch } from \"../../../hooks/reduxHooks\";\n\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\n\nimport * as Styled from \"./DepartmentsPagination.styled\";\nimport {\n  departmentsDataSelector,\n  pageSelector,\n} from \"../../../redux/selectors/departmentsSelectors\";\n\nconst DepartmentsPagination: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const isTablet = useMediaQuery(\"(min-width:768px)\");\n\n  const paginationSize = isTablet ? \"large\" : \"small\";\n\n  // Get all departments for city\n  const departments = useAppSelector(departmentsDataSelector);\n  const { TotalCountForCity } = departments!!;\n\n  // Genereta total count\n  const totalCount = Math.ceil(TotalCountForCity / 12);\n\n  // Get page value from redux store\n  const page = useAppSelector(pageSelector);\n\n  const paginationOnChange = (value: number) => {\n    dispatch(setPage(value));\n  };\n\n  return (\n    <Styled.MyBox>\n      <Stack spacing={2}>\n        <Pagination\n          size={paginationSize}\n          onChange={(_, value: number) => paginationOnChange(value)}\n          count={totalCount}\n          page={page}\n          shape=\"rounded\"\n        />\n      </Stack>\n    </Styled.MyBox>\n  );\n};\n\nexport default DepartmentsPagination;\n","import React from \"react\";\n\nimport { useAppSelector } from \"../../../hooks/reduxHooks\";\n\nimport {\n  departmentsDataSelector,\n  departmentsLoadingSelector,\n} from \"../../../redux/selectors/departmentsSelectors\";\n\nimport { nanoid } from \"@reduxjs/toolkit\";\n\nimport { Grid, Card, CardContent, Typography } from \"@mui/material\";\n\nimport { Loader } from \"../../Common\";\n\nconst DepartmentsList: React.FC = () => {\n  // Get loading status\n  const loading = useAppSelector(departmentsLoadingSelector);\n\n  // Get all departments for city\n  const departments = useAppSelector(departmentsDataSelector);\n\n  if (loading) return <Loader />;\n  return (\n    <Grid container spacing={2}>\n      {departments?.Departments.map(\n        ({ Description, CityDescription, Schedule, Phone }) => (\n          <Grid item key={nanoid()} xs={12} sm={6} md={4}>\n            <Card sx={{ height: \"100%\" }}>\n              <CardContent>\n                <Typography variant=\"h6\" component=\"p\" gutterBottom>\n                  {`${Description}, ${CityDescription}`}\n                </Typography>\n\n                {Phone && (\n                  <Typography sx={{ fontSize: 16 }} component=\"p\" gutterBottom>\n                    {`Телефон: +${Phone}`}\n                  </Typography>\n                )}\n\n                <Typography\n                  sx={{ fontSize: 18, color: \"#1976d2\" }}\n                  component=\"p\"\n                  gutterBottom\n                >\n                  Графiк роботи:\n                </Typography>\n                {Object.entries(Schedule).map(([day, time]) => (\n                  <Typography\n                    component=\"p\"\n                    gutterBottom\n                    variant=\"body2\"\n                    key={nanoid()}\n                  >\n                    {`${[day]}: ${time}`}\n                  </Typography>\n                ))}\n              </CardContent>\n            </Card>\n          </Grid>\n        )\n      )}\n    </Grid>\n  );\n};\n\nexport default DepartmentsList;\n","import React, { FC, useEffect } from \"react\";\n\nimport { useAppDispatch, useAppSelector } from \"../../hooks/reduxHooks\";\n\nimport {\n  citySelector,\n  departmentsDataSelector,\n  pageSelector,\n} from \"../../redux/selectors/departmentsSelectors\";\n\nimport { getDepartmentsForCity } from \"../../redux/operations/departmentsOperations\";\n\nimport {\n  DepartmentsForm,\n  DepartmentsList,\n  DepartmentsPagination,\n} from \"../../components/Departments\";\n\nimport { Header } from \"../../components/Common\";\n\nimport { Container, Typography } from \"@mui/material\";\n\nconst PageDepartments: FC = () => {\n  const dispatch = useAppDispatch();\n\n  // Get page for fecth data\n  const page = useAppSelector(pageSelector);\n\n  // Get city for fecth data\n  const city = useAppSelector(citySelector);\n\n  // Get all departments for city\n  const departments = useAppSelector(departmentsDataSelector);\n\n  // If city or page change, fetch data\n  useEffect(() => {\n    if (city) dispatch(getDepartmentsForCity({ city, page }));\n  }, [dispatch, city, page]);\n\n  return (\n    <>\n      <Header />\n      <section>\n        <Typography\n          aria-label=\"Заголовок секцiiСписок вiддiлень\"\n          variant=\"h1\"\n          component={\"h2\"}\n          sx={{ display: \"none\" }}\n        >\n          Список вiддiлень\n        </Typography>\n        <Container sx={{ pt: \"3rem\", pb: \"3rem\" }}>\n          <DepartmentsForm />\n\n          {departments && (\n            <>\n              <DepartmentsPagination />\n              <DepartmentsList />\n            </>\n          )}\n        </Container>\n      </section>\n    </>\n  );\n};\n\nexport default PageDepartments;\n"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","citySelector","state","departmentsState","city","pageSelector","page","departmentsDataSelector","departmentsForCityData","departmentsLoadingSelector","loading","MyBox","styled","Box","marginBottom","width","display","alignItems","justifyContent","PaperStyles","p","maxWidth","ButtonStyles","color","concat","COLORS","transition","_useState","useState","_useState2","_slicedToArray","value","setValue","dispatch","_jsx","Styled","children","_jsxs","Paper","onSubmit","event","preventDefault","setPage","setCity","component","sx","InputBase","type","onChange","currentTarget","ml","flex","placeholder","Divider","height","m","orientation","IconButton","SearchIcon","paginationSize","useMediaQuery","TotalCountForCity","totalCount","Math","ceil","Stack","spacing","Pagination","size","_","paginationOnChange","count","shape","departments","Loader","Grid","container","Departments","map","_ref","Description","CityDescription","Schedule","Phone","item","xs","sm","md","Card","CardContent","Typography","variant","gutterBottom","fontSize","Object","entries","_ref2","_ref3","day","time","nanoid","useEffect","getDepartmentsForCity","_Fragment","Header","Container","pt","pb","DepartmentsForm","DepartmentsPagination","DepartmentsList"],"sourceRoot":""}